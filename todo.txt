Todo:
- get the source code in another folder, keep web branch there, when you run, npm install won't take long time. 
+- introduce mobile (rather earlier than later, because architecture should be aligned)
+ required fields
	+ submitting empty required field should be handled.
	+ handle validation error in UI. show them etc	
		+ consider how to handle other error messages. 
		+ most of the error messages (actually including form values validation) only normally occurs if the service caller tweaks the system. probably better to ignore when they occur.
	+- validation with javascript injection (start date < end date)
		+- both in client and +server side.
			+ I am not going to run custom validatations in client side. because, it brings complexity also, it actually works fine like this. I will work anyway once the form is submitted. 
- other validations
	- date
		- can select x days after/before or later/earlier (from today)		
- values for a past task	
	- submitted values should be saved (each)
	- should we also save the full snap shot?
		- or we can replay each submitted values
	- should specifically diff is logged
		- task form has 4 values, but only two of them changed. 
			- if none of them change on submission, then no value change log.
	- submitted values should be shown (instead of the latest versions)
		- last versions could be included as well if changed. 
- field visible, editable by javascript
	- if we are going to do these in client side (and it is the only practical way), would that be fine to do also custom validations in client side. 
- requesting user field for leave request (is this priority?)
	- first of, user as a field
	- field auto calculated. 
	- first user may change?
	- then read only.
- empty fields - how to show them, with a dash (-) probably? or (blank)
- save form values
	- Field Name * (for required fields)
	- scenarios
		- expense request?
- reports?
	-hr report for leave request
	- manager report (process or task?)
		- pick groups 
		- show items [with default selection of 'filter due items']
- when assigned to manager
	- no manager? -> process owner , no process owner->same person (notification in any case)
- login
	- side nav visibility
- assign to group manager
- notifications
- create paralel tasks
- deactivate buttons when a request is sent
- information tooltips or boxes for process and task
	- content from configuration
- actions tooltip
	- fix tooltip for save action
- if action brings back to the same task handle it in UI, because in default it leaves the current task (except save)
- scenarios for when a previous task is revisited, what are the chalanges?
- save action shouldn't run all validations
	- data type, max length, security validation is fine
	- user should be able to save values if required and possibly other validation not satisfied. 
- security validations	
	- possible max value for text
	- max file size 
	- data type validations	
		- should be refused or ignored?	

Later:
- collection group queries
	- how to apply exactly
	- can it be projected under a path?
	- https://github.com/googleapis/google-cloud-dotnet/blob/master/apis/Google.Cloud.Firestore/Google.Cloud.Firestore.IntegrationTests/QueryTest.cs
- as default user picture, initials and a specific color background
	- same for processes
- put back to group
- Actions going back to a previous one should be assigned the user who worked on that one. 
- ? system/webpage open, user gets user doc each minute, if any task changes, notifies to UI.
- admin ops
	- assign to anyone
	- change values
	- jump process to any step
- user group management
	- denormalize data
- group tasks listed
	- one of them clicked
	- back button
	- load the previous data (should be cached somewhere)
	- then make the request again and update the result
- check all api parameters for 
	- null / empty
	- how they could be abused
- find and ensure a max amount of web request upload content for non-file services
- frontend - ignore submitted read only values
- backend - don't save readonly form values. 
- roll back scenarios
	- cancel last action & data submit & created task
	- a data model that can go back to any state. maybe a subcollection. 
	- each action can create a revision with a full state snapshot 
		- (actually, probably we will just keep process instance snapshot with an action description)
			more clearly, wheneverprocess instance changes, it will be versioned with full process instance data
				- with the action data (save with this data triggered, process model changed etc.)
		- save data
			- keep submitted data and
			- changed whole data
		- call action ( and save data )
		- change on process model
		- I don't know if logs should be here
			- this notification sent
			- the text of "this action is done by this person"
- task parallelisation
	- if it is a specific task (with fields and everything)
		- the data which each task instance produce , can stay in a collection
- making a process instance a project-like entity?
	- having lots of standard tasks
	- joining them serially and parallelly
	- process instance data is not something we care
	- this is good to keep in mind
		- project has a unique flow and steps
		- process has a predefined flow and steps